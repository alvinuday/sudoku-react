{"version":3,"sources":["components/Square.jsx","components/SudokuButtons.jsx","components/Board.jsx","components/Puzzles.js","components/SudokuGame.jsx","reportWebVitals.js","index.js"],"names":["Square","generateSquareContent","disabled","props","editable","squareValue","value","style","ri","rowIndex","ci","colIndex","conflict","className","type","onChange","handleSquareValueChange","event","newSquareValue","target","isValidInput","onValueChange","i","length","isNumber","this","Component","num","isNaN","SudokuButtons","btnStyle","marginTop","marginLeft","margin","color","Button","variant","onClick","onVerifyClick","historyLength","onUndoClick","onNewGameClick","Board","j","newValue","onSquareValueChange","generateBoard","board","boardState","currentRow","conflicts","has","currentSquare","cellValue","push","puzzles","createArray","arr","Array","arguments","args","prototype","slice","call","apply","SudokuGame","getRandomPuzzle","Math","floor","random","getObjectCopyofArray","JSON","parse","stringify","setState","prevState","newBoardState","prevEditable","cellId","newHistory","history","Set","handleUndoClick","pop","handleNewGameClick","getFormattedPuzzle","handleVerifyClick","state","rows","cols","boxes","hasOwnProperty","boxId","rowConflicts","flatten","getConflicts","Object","values","colConflicts","boxConflicts","mergedConflicts","a","isArray","concat","map","arrs","getConflictsInArray","conflictMap","curr","filter","formatPuzzle","puzzle","formattedPuzzle","rowId","getRowId","colId","getColId","num1","num2","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mQACMA,E,4MACJC,sBAAwB,WAGtB,IAAMC,GAAY,EAAKC,MAAMC,SACvBC,EAAmC,MAArB,EAAKF,MAAMG,MAAgB,GAAK,EAAKH,MAAMG,MAGzDC,EAAQ,GACRC,EAAK,EAAKL,MAAMM,SAChBC,EAAK,EAAKP,MAAMQ,SActB,OAbIH,EAAK,GAAKA,EAAK,IAAM,IACvBD,EAAK,UAAgB,mBAEnBG,EAAK,GAAKA,EAAK,IAAM,IACvBH,EAAK,WAAiB,mBAEpB,EAAKJ,MAAMS,WACT,EAAKT,MAAMC,SACbG,EAAK,WAAiB,MAEtBA,EAAK,OAAa,iBAIpB,6BACE,uBACEM,UAAU,SACVN,MAAOA,EACPO,KAAK,OACLZ,SAAUA,EACVa,SAAU,EAAKC,wBACfV,MAAOD,O,EAMfW,wBAA0B,SAACC,GACzB,IAAMC,EAAiBD,EAAME,OAAOb,MACpC,GAAI,EAAKc,aAAaF,GAAiB,CACrC,IAAMV,EAAK,EAAKL,MAAMM,SAChBC,EAAK,EAAKP,MAAMQ,SACtB,EAAKR,MAAMkB,cAAcb,EAAIE,EAAIQ,K,EAGrCE,aAAe,SAACE,GACd,MAAa,KAANA,GAA0B,IAAbA,EAAEC,QAAgBC,EAASF,I,4CAEjD,WACE,OAAOG,KAAKxB,4B,GAlDKyB,aAqDfF,EAAW,SAACG,GAChB,OAAQC,MAAMD,IAGD3B,I,QCRA6B,E,4JA7Cb,WACE,IAAMC,EAAW,CACfC,UAAW,GACXC,WAAY,GACZC,OAAQ,GACR,UAAW,CACTC,MAAO,QAIX,OACE,sBAAKrB,UAAU,gBAAf,UACE,cAACsB,EAAA,EAAD,CACEtB,UAAU,UACVqB,MAAM,UACNE,QAAQ,WACR7B,MAAOuB,EACPO,QAASZ,KAAKtB,MAAMmC,cALtB,oBASA,cAACH,EAAA,EAAD,CACEtB,UAAU,UACVqB,MAAM,YACNE,QAAQ,WACRlC,SAAUuB,KAAKtB,MAAMoC,cAAgB,EACrChC,MAAOuB,EACPO,QAASZ,KAAKtB,MAAMqC,YANtB,kBAUA,cAACL,EAAA,EAAD,CACEtB,UAAU,UACVqB,MAAM,UACNE,QAAQ,YACR7B,MAAOuB,EACPO,QAASZ,KAAKtB,MAAMsC,eALtB,6B,GAhCoBf,aCkDbgB,E,4MAjDb1B,wBAA0B,SAACM,EAAGqB,EAAGC,GAC/B,EAAKzC,MAAM0C,oBAAoBvB,EAAGqB,EAAGC,I,EAGvCE,cAAgB,WAId,IAHA,IAAMC,EAAQ,GACRC,EAAa,EAAK7C,MAAM6C,WAErB1B,EAAI,EAAGA,EAAI0B,EAAWzB,OAAQD,IAAK,CAE1C,IADA,IAAI2B,EAAa,GACRN,EAAI,EAAGA,EAAIK,EAAW1B,GAAGC,OAAQoB,IAAK,CAC7C,IACM/B,IADY,EAAKT,MAAM+C,UACFC,IAAI7B,EAAI,GAAKqB,GACpCS,EACF,cAAC,EAAD,CAEE9C,MAAO0C,EAAW1B,GAAGqB,GAAGU,UACxBjD,SAAU4C,EAAW1B,GAAGqB,GAAGvC,SAC3BQ,SAAUA,EACVH,SAAUa,EACVX,SAAUgC,EACVtB,cAAe,EAAKL,yBANf,GAAKM,EAAIqB,GASlBM,EAAWK,KAAKF,GAElBL,EAAMO,KAAK,6BAAaL,GAAJ3B,IAEtB,OAAOyB,G,4CAGT,WACE,IAAMA,EAAQtB,KAAKqB,gBACnB,OACE,gCACE,uBAAOjC,UAAU,QAAjB,SACE,gCAAQkC,MAEV,cAAC,EAAD,CACER,cAAed,KAAKtB,MAAMoC,cAC1BC,YAAaf,KAAKtB,MAAMqC,YACxBC,eAAgBhB,KAAKtB,MAAMsC,eAC3BH,cAAeb,KAAKtB,MAAMmC,uB,GA3ChBZ,aCmGL6B,EAvGC,CACd,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,oFACA,qF,MCiFF,SAASC,EAAYjC,GACnB,IAAIkC,EAAM,IAAIC,MAAMnC,GAAU,GAC5BD,EAAIC,EAEN,GAAIoC,UAAUpC,OAAS,EAErB,IADA,IAAIqC,EAAOF,MAAMG,UAAUC,MAAMC,KAAKJ,UAAW,GAC1CrC,KAAKmC,EAAIlC,EAAS,EAAID,GAAKkC,EAAYQ,MAAMvC,KAAMmC,GAG5D,OAAOH,EAGMQ,M,kDA3Lb,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IASR+D,gBAAkB,WAChB,OAAOX,EAAQY,KAAKC,MAAMD,KAAKE,SAAWd,EAAQhC,UAXjC,EAcnB+C,qBAAuB,SAACb,GACtB,OAAOc,KAAKC,MAAMD,KAAKE,UAAUhB,KAfhB,EAkBnBzC,wBAA0B,SAACM,EAAGqB,EAAGC,GAC/B,EAAK8B,UAAS,SAACC,GACb,IAAMC,EAAgB,EAAKN,qBAAqBK,EAAU3B,YACpD6B,EAAeF,EAAU3B,WAAW1B,GAAGqB,GAAGvC,SAChDwE,EAActD,GAAGqB,GAAK,CACpBU,UAAWT,EACXkC,OAAQ,EAAKL,UAAUnD,EAAGqB,GAC1BvC,SAAUyE,GAIZ,IAAME,EAAa,EAAKT,qBAAqBK,EAAUK,SAGvD,OAFAD,EAAWzB,KAAKqB,EAAU3B,YAEnB,CACLA,WAAY4B,EACZI,QAASD,EACT7B,UAAW,IAAI+B,IAAI,SAnCN,EAwCnBC,gBAAkB,WAChB,EAAKR,UAAS,SAACC,GACb,IAAMI,EAAa,EAAKT,qBAAqBK,EAAUK,SAIvD,MAAO,CACLhC,WAJqB+B,EAAWI,MAKhCH,QAASD,EACT7B,UAAW,IAAI+B,IAAI,SAjDN,EAsDnBG,mBAAqB,WACnB,EAAKV,SAAS,CACZ1B,WAAY,EAAKqC,qBACjBL,QAAS,GACT9B,UAAW,IAAI+B,IAAI,OA1DJ,EA8DnBK,kBAAoB,WASlB,IARA,IAAMtC,EAAa,EAAKuC,MAAMvC,WAGxBwC,EAAO,GACPC,EAAO,GAEPC,EAAQ,GAELpE,EAAI,EAAGA,EAAI0B,EAAWzB,OAAQD,IAAK,CAC1CkE,EAAKlE,GAAK,EAAKgD,qBAAqBtB,EAAW1B,IAC/C,IAAK,IAAIqB,EAAI,EAAGA,EAAIK,EAAW1B,GAAGC,OAAQoB,IAAK,CACzC8C,EAAKE,eAAehD,GACtB8C,EAAK9C,GAAGW,KAAKN,EAAW1B,GAAGqB,IAE3B8C,EAAK9C,GAAK,CAACK,EAAW1B,GAAGqB,IAI3B,IAAMiD,EAAQ,EAAKnB,UAAUN,KAAKC,MAAM9C,EAAI,GAAI6C,KAAKC,MAAMzB,EAAI,IAC3D+C,EAAMC,eAAeC,GACvBF,EAAME,GAAOtC,KAAKN,EAAW1B,GAAGqB,IAEhC+C,EAAME,GAAS,CAAC5C,EAAW1B,GAAGqB,KAKpC,IAAMkD,EAAe,EAAKC,QAAQ,EAAKC,aAAaC,OAAOC,OAAOT,KAC5DU,EAAe,EAAKJ,QAAQ,EAAKC,aAAaC,OAAOC,OAAOR,KAC5DU,EAAe,EAAKL,QAAQ,EAAKC,aAAaC,OAAOC,OAAOP,KAE5DU,EAAe,sBAAOP,GAAP,YAAwBK,GAAxB,YAAyCC,IAC9D,EAAKzB,SAAS,CAAExB,UAAW,IAAI+B,IAAImB,MA/FlB,EAkGnBN,QAAU,SAACO,GAAO,IAAD,EACf,OAAO3C,MAAM4C,QAAQD,IAAK,MAAGE,OAAH,oBAAaF,EAAEG,IAAI,EAAKV,WAAYO,GAnG7C,EAsGnBN,aAAe,SAACU,GACd,OAAOA,EAAKD,KAAI,SAAC/C,GAAD,OAAS,EAAKiD,oBAAoBjD,OAvGjC,EA0GnBiD,oBAAsB,SAACjD,GAErB,IADA,IAAMkD,EAAc,GACXrF,EAAI,EAAGA,EAAImC,EAAIlC,OAAQD,IAAK,CACnC,IAAIsF,EAAOnD,EAAInC,GACQ,MAAnBsF,EAAKvD,YACHsD,EAAYhB,eAAeiB,EAAKvD,WAClCsD,EAAYC,EAAKvD,WAAWC,KAAKsD,EAAK9B,QAEtC6B,EAAYC,EAAKvD,WAAa,CAACuD,EAAK9B,SAI1C,OAAOkB,OAAOC,OAAOU,GAAaE,QAAO,SAACpD,GAAD,OAASA,EAAIlC,OAAS,MAtH9C,EAyHnBuF,aAAe,SAACC,GAEd,IADA,IAAMC,EAAkBxD,EAAY,EAAG,GAC9BlC,EAAI,EAAGA,EAAIyF,EAAOxF,OAAQD,IAAK,CACtC,IAAM2F,EAAQ,EAAKC,SAAS5F,GACtB6F,EAAQ,EAAKC,SAAS9F,GAEtBlB,EAAyB,MAAd2G,EAAOzF,GAExB0F,EAAgBC,GAAOE,GAAS,CAC9B9D,UAAW0D,EAAOzF,GAClBwD,OAAQ,EAAKL,UAAUwC,EAAOE,GAC9B/G,SAAUA,GAGd,OAAO4G,GAvIU,EAyInBvC,UAAY,SAAC4C,EAAMC,GACjB,OAAOD,EAAO,GAAKC,GA1IF,EA6InBJ,SAAW,SAAC5F,GACV,OAAO6C,KAAKC,MAAM9C,EAAI,IA9IL,EAiJnB8F,SAAW,SAAC9F,GACV,OAAOA,EAAI,GAlJM,EAqJnB+D,mBAAqB,WACnB,IAAM0B,EAAS,EAAK7C,kBAEpB,OADwB,EAAK4C,aAAaC,IApJ1C,EAAKxB,MAAQ,CACXvC,WAAY,EAAKqC,qBACjBL,QAAS,GACT9B,UAAW,IAAI+B,IAAI,KANJ,E,0CA2JnB,WACE,OACE,sBAAKpE,UAAU,SAAf,UACE,oBAAIA,UAAU,eAAeN,MAAO,CAAEgH,UAAW,UAAjD,6BAGA,cAAC,EAAD,CACEvE,WAAYvB,KAAK8D,MAAMvC,WACvBE,UAAWzB,KAAK8D,MAAMrC,UACtBT,eAAgBhB,KAAK2D,mBACrBvC,oBAAqBpB,KAAKT,wBAC1BuB,cAAed,KAAK8D,MAAMP,QAAQzD,OAClCiB,YAAaf,KAAKyD,gBAClB5C,cAAeb,KAAK6D,2B,GAzKL5D,aCOV8F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAE1BZ,M","file":"static/js/main.34f9409c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass Square extends Component {\n  generateSquareContent = () => {\n    //square can be edited by user if its value is '0'\n\n    const disabled = !this.props.editable;\n    const squareValue = this.props.value === \"0\" ? \"\" : this.props.value;\n\n    //styling borders\n    const style = {};\n    const ri = this.props.rowIndex;\n    const ci = this.props.colIndex;\n    if (ri > 0 && ri % 3 === 0) {\n      style[\"borderTop\"] = \"2px solid black\";\n    }\n    if (ci > 0 && ci % 3 === 0) {\n      style[\"borderLeft\"] = \"2px solid black\";\n    }\n    if (this.props.conflict) {\n      if (this.props.editable) {\n        style[\"background\"] = \"red\";\n      } else {\n        style[\"border\"] = \"3px solid red\";\n      }\n    }\n    return (\n      <td>\n        <input\n          className=\"Square\"\n          style={style}\n          type=\"text\"\n          disabled={disabled}\n          onChange={this.handleSquareValueChange}\n          value={squareValue}\n        />\n      </td>\n    );\n  };\n\n  handleSquareValueChange = (event) => {\n    const newSquareValue = event.target.value;\n    if (this.isValidInput(newSquareValue)) {\n      const ri = this.props.rowIndex;\n      const ci = this.props.colIndex;\n      this.props.onValueChange(ri, ci, newSquareValue);\n    }\n  };\n  isValidInput = (i) => {\n    return i === \"\" || (i.length === 1 && isNumber(i));\n  };\n  render() {\n    return this.generateSquareContent();\n  }\n}\nconst isNumber = (num) => {\n  return !isNaN(num);\n};\n\nexport default Square;\n","import React, { Component } from \"react\";\n/* import styles from \"./mystyle.module.css\"; */\n/* import \"./SudokuButtons.css\"; */\nimport { Button } from \"@material-ui/core\";\nclass SudokuButtons extends Component {\n  render() {\n    const btnStyle = {\n      marginTop: 25,\n      marginLeft: 18,\n      margin: 10,\n      \"&:hover\": {\n        color: \"red\",\n      },\n    };\n\n    return (\n      <div className=\"SudokuButtons\">\n        <Button\n          className=\"gameBtn\"\n          color=\"primary\"\n          variant=\"outlined\"\n          style={btnStyle}\n          onClick={this.props.onVerifyClick}\n        >\n          Verify\n        </Button>\n        <Button\n          className=\"gameBtn\"\n          color=\"secondary\"\n          variant=\"outlined\"\n          disabled={this.props.historyLength < 1}\n          style={btnStyle}\n          onClick={this.props.onUndoClick}\n        >\n          Undo\n        </Button>\n        <Button\n          className=\"gameBtn\"\n          color=\"primary\"\n          variant=\"contained\"\n          style={btnStyle}\n          onClick={this.props.onNewGameClick}\n        >\n          New Game\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default SudokuButtons;\n","import React, { Component } from \"react\";\nimport Square from \"./Square\";\nimport SudokuButtons from \"./SudokuButtons\";\n\nclass Board extends Component {\n  handleSquareValueChange = (i, j, newValue) => {\n    this.props.onSquareValueChange(i, j, newValue);\n  };\n\n  generateBoard = () => {\n    const board = [];\n    const boardState = this.props.boardState;\n\n    for (let i = 0; i < boardState.length; i++) {\n      let currentRow = [];\n      for (let j = 0; j < boardState[i].length; j++) {\n        const conflicts = this.props.conflicts;\n        const conflict = conflicts.has(i + \"\" + j) ? true : false;\n        let currentSquare = (\n          <Square\n            key={\"\" + i + j}\n            value={boardState[i][j].cellValue}\n            editable={boardState[i][j].editable}\n            conflict={conflict}\n            rowIndex={i}\n            colIndex={j}\n            onValueChange={this.handleSquareValueChange}\n          />\n        );\n        currentRow.push(currentSquare);\n      }\n      board.push(<tr key={i}>{currentRow}</tr>);\n    }\n    return board;\n  };\n\n  render() {\n    const board = this.generateBoard();\n    return (\n      <div>\n        <table className=\"Board\">\n          <tbody>{board}</tbody>\n        </table>\n        <SudokuButtons\n          historyLength={this.props.historyLength}\n          onUndoClick={this.props.onUndoClick}\n          onNewGameClick={this.props.onNewGameClick}\n          onVerifyClick={this.props.onVerifyClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","const puzzles = [\n  \"290500007700000400004738012902003064800050070500067200309004005000080700087005109\",\n  \"080020000040500320020309046600090004000640501134050700360004002407230600000700450\",\n  \"608730000200000460000064820080005701900618004031000080860200039050000100100456200\",\n  \"902040560000009000061250470040030102600480090003070080500008000306500947100360005\",\n  \"020001630090500400806049002900005701000900300352076800009004506080050000045600018\",\n  \"034060901700012680080009000023050790007020005500078030010590000000000413078130020\",\n  \"020604030450100206600005100004003000095201380200500907510000603807352000000000058\",\n  \"032054900090001004080700031005600027800070000270140005000210300018907652603000000\",\n  \"009000700080034065500027001400380096300400017908006000610009308023501070000060040\",\n  \"710480060090050070004030908000040090080300020630208045000500000027001059560970201\",\n  \"040085701950700800080006400370002000002008170600007082809023500400800010001050208\",\n  \"050800300001040860308010002085230600003080007020090083560170498807400000000050700\",\n  \"034580026080700301001002000026400030019370205000100090000000000500014760047063019\",\n  \"670009020030005090900760504806090241020000009090682000007030410580000600300206070\",\n  \"608043790002007016900600000500004180040030050800069040704005361020006005100078000\",\n  \"007090004200000060830746210903604150002530007100000040001050693006903000040100005\",\n  \"246908001700004200000010406030042080510009043800006000003475860460800032070000000\",\n  \"920006301400008065005901000200010030000004750548200600004090020090000540103642800\",\n  \"090068100028500004060200073800624700300000021902300400000000900450036000609150340\",\n  \"018036040609080003000900860307600408050020007090400500062050084000070006084209001\",\n  \"510000360000006000090253870902300040850600703000540080020160900100030050069070028\",\n  \"067050030910800006000032790891400052600305080000010040006100204000003860780504000\",\n  \"500072060970308051001000040450000810002405600007900005010020070204059030090600502\",\n  \"300700081100300907209108000560000809700490060000860010040000078820610090010084020\",\n  \"040901030060030007037004510004150720650708900000000100018090602020010350070502000\",\n  \"004050029500491380930000000008060003000007002309204508051079064043000010000102005\",\n  \"000750902005200006920008700890105000002400100004800579450900600000507091170600040\",\n  \"051080900000710300038002016043001600180200030000034092800309250010020040590000700\",\n  \"620900000000065420507020109800102050209048600040000080400290508052700300300006090\",\n  \"060000007237604100000701603000073010140200700008100032092460580006030270700500000\",\n  \"000073000025090037760020100004960070907005300600080094076004010400200750001036008\",\n  \"850000009090013050070502810060030000027408603300009107500940360900006405040020000\",\n  \"300060000000137082206000750080070024720004960050906000002700100160803095500010030\",\n  \"439000000000007952000819300002090500950460070700500409598000620000638005300900100\",\n  \"068045200000030106300020070040000000906012087100904302800007620023401790005200000\",\n  \"003009006270638090060000037540300079039050040000090100302800000004120785007060300\",\n  \"400003091080260400605700300150040030040130579900005000800402015010050000009070806\",\n  \"201067000000310690076000502807006000050704020004003086740200800060001203030078040\",\n  \"817090200040678059000000070006000004090080706502046080000200000035810642420060800\",\n  \"040053706000000090876042003000000008087610904020380010700000000010206837630071500\",\n  \"106903005000000630400850090004008009089470010060100407531024900000300140040090050\",\n  \"000500000265030081007060350403000690002600008001845700910070006700450010008020904\",\n  \"900540000001620098035000026090406001000009003126005740007054000340000805050037060\",\n  \"007420006904800752800500000398050070005900600000087090000040980259108000001006503\",\n  \"016003280002010300080006007600000002830670059020405030098107506300900020400008090\",\n  \"080609024900740080470000900050080003030400891806090000600075008720104650090000300\",\n  \"000105200200000503135024090710006000450803102000010750504002031800090400003040800\",\n  \"304750009900406070200000405400605003500012704810000500180093000093004058000007030\",\n  \"040000096709061020020059100007600000080027601690100075000846000072003804408000003\",\n  \"009025107004000006206094800800200000540700012001340780400900300030008500068002401\",\n  \"906010005100804900030090071280405706507100080000060000008052619010040000309001007\",\n  \"800200000003801200002006748100023074027008006006010800275040600000180530300005400\",\n  \"706390080035700010000040630004007000000003028590460370003209706067805042100000000\",\n  \"400703000007009038910020760300000800602015300009038510200381000006000140100007203\",\n  \"084160329003200060900030000130008007000056013460001800008700031000084050240003700\",\n  \"800054290003008004950003070010000000090082015540610030429831500000070040600000901\",\n  \"095014800100075040030000010006002008901807326002006000070253060609700034500000002\",\n  \"509001084006009100800074090308042007900150006005000008054000061600010209700236000\",\n  \"030007904072030600900106030004801000860003490007020150010062500049000021500400800\",\n  \"400820600037040800080500901090000060246093510000410090020074006000180430304000200\",\n  \"070301000034027901005000207087500000906030105000190004000680700760000540091074060\",\n  \"050009002090084036030200007910075600500900008800600150209000005001502004005407260\",\n  \"602050004010200507900310600520060401000020060160490002080500040000902006291000075\",\n  \"248000190600105003000980004560000407030804500700010030800469300100020049406000008\",\n  \"105804002080020000030001408860093000300005981090400200053109020006500107200070500\",\n  \"007300901200705030903200005009024510000100006130900400062010008090000000300876259\",\n  \"208190700605300020000500008910075200000630004304000609080060092040003000062081407\",\n  \"008000097090307001340089020280003900901040000000205048800401003030000604015032800\",\n  \"281300907005700002000029050009032070500000021420600008090500086000076009652090700\",\n  \"014002070060910020300008061209040050000527189075000000096050000500000417000783500\",\n  \"203050140050700069400201000530009680090806000040500003025100300300007008900025470\",\n  \"000206809280041000043000107307002005000580006150070030006004571790050000400307090\",\n  \"760090240005000060090687300089000000003809521007026003370065092508002000000030004\",\n  \"800315049309002010002000008006004080008060490540097100030600875000008900904703000\",\n  \"000100020008500070601290804003900007002013060580060340046005000000600452025401003\",\n  \"090708062000000007278306090029000000004065973030087100000830001002000740085074030\",\n  \"340005600610084009000003028290000070830057000000019843509000001007002530003570090\",\n  \"420001000001073045005200061008002500050090134309100000590600080000030052034025700\",\n  \"060000100000600005879125306308009200002300600400072009900200003001030090023094510\",\n  \"000000050003100804769504030000097001091050040076800520400000000058403017600075403\",\n  \"010460020060020790205000600040030107007946000023000904600050870004008200802103050\",\n  \"080001405213406007000800030100908000000000053627003840302070518870320000000004070\",\n  \"430000000007005280050142030604200800000607905508090100905360020083500091000700008\",\n  \"470900860800507090100000005007098206008400009041060300003004900009002700704310608\",\n  \"260050040703040060000001035010030600604000120009176004370000080005763010100800570\",\n  \"210900830807050020000048100105000980009085200080609003970000000020800000500792468\",\n  \"350710900090800001002090607039426000120008005000000293000000040983640710200300800\",\n  \"043709010000200600805030004000450387358007020010300000500003900037800000060510873\",\n  \"040085090003000506650903040300092681520000900000370000010040803906800070007230009\",\n  \"790805600500004100004070029003207980200400006059000200380002400065040802000980060\",\n  \"805723164006800500010000000000370610602004080750008300000209800203100400070080201\",\n  \"079082503400010080800600040206003790090004100004706050003000021002369005700200300\",\n  \"006847200800900070203000490780060000000000069015490307020030700938701640000080900\",\n  \"029000045070050000008421709002500000580003604400098502840106920010030087000040000\",\n  \"010075008005810006070000041802040013100308000050900087940102700500030890003009060\",\n  \"706005001200000507100072090402010000000086104015090076640050082900000700020368400\",\n  \"009100030028009510010008600650070940004090800900035700200007190046903270007500000\",\n  \"804057103700600080600009040060490702120000090000803600980300514000500800201908000\",\n  \"000300071062710000107005006235140800070600000000008293620030080050901002800050704\",\n  \"731000002900000601000914008005000900000570280213069040008702109142006800000008020\",\n];\n\nexport default puzzles;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport puzzles from \"./Puzzles\";\nimport \"./SudokuGame.css\";\n\nclass SudokuGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardState: this.getFormattedPuzzle(),\n      history: [],\n      conflicts: new Set([]),\n    };\n  }\n\n  getRandomPuzzle = () => {\n    return puzzles[Math.floor(Math.random() * puzzles.length)];\n  };\n\n  getObjectCopyofArray = (arr) => {\n    return JSON.parse(JSON.stringify(arr));\n  };\n\n  handleSquareValueChange = (i, j, newValue) => {\n    this.setState((prevState) => {\n      const newBoardState = this.getObjectCopyofArray(prevState.boardState);\n      const prevEditable = prevState.boardState[i][j].editable;\n      newBoardState[i][j] = {\n        cellValue: newValue,\n        cellId: this.stringify(i, j),\n        editable: prevEditable,\n      };\n\n      //pushing prev Board state to history (for undoing changes)\n      const newHistory = this.getObjectCopyofArray(prevState.history);\n      newHistory.push(prevState.boardState);\n\n      return {\n        boardState: newBoardState,\n        history: newHistory,\n        conflicts: new Set([]),\n      };\n    });\n  };\n\n  handleUndoClick = () => {\n    this.setState((prevState) => {\n      const newHistory = this.getObjectCopyofArray(prevState.history);\n      const lastBoardState = newHistory.pop();\n\n      //assigning prev board state to the current board state\n      return {\n        boardState: lastBoardState,\n        history: newHistory,\n        conflicts: new Set([]),\n      };\n    });\n  };\n\n  handleNewGameClick = () => {\n    this.setState({\n      boardState: this.getFormattedPuzzle(),\n      history: [],\n      conflicts: new Set([]),\n    });\n  };\n\n  handleVerifyClick = () => {\n    const boardState = this.state.boardState;\n\n    // rows[0] ----> row 1 , cols[0] -----> col 1\n    const rows = {};\n    const cols = {};\n\n    const boxes = {};\n    // boxes['00'] -> array of values in box 1 ie, row 1 , col 1\n    for (let i = 0; i < boardState.length; i++) {\n      rows[i] = this.getObjectCopyofArray(boardState[i]);\n      for (let j = 0; j < boardState[i].length; j++) {\n        if (cols.hasOwnProperty(j)) {\n          cols[j].push(boardState[i][j]);\n        } else {\n          cols[j] = [boardState[i][j]];\n        }\n\n        //Putting values in boxees\n        const boxId = this.stringify(Math.floor(i / 3), Math.floor(j / 3));\n        if (boxes.hasOwnProperty(boxId)) {\n          boxes[boxId].push(boardState[i][j]);\n        } else {\n          boxes[boxId] = [boardState[i][j]];\n        }\n      }\n    }\n\n    const rowConflicts = this.flatten(this.getConflicts(Object.values(rows)));\n    const colConflicts = this.flatten(this.getConflicts(Object.values(cols)));\n    const boxConflicts = this.flatten(this.getConflicts(Object.values(boxes)));\n\n    const mergedConflicts = [...rowConflicts, ...colConflicts, ...boxConflicts];\n    this.setState({ conflicts: new Set(mergedConflicts) });\n  };\n\n  flatten = (a) => {\n    return Array.isArray(a) ? [].concat(...a.map(this.flatten)) : a;\n  };\n\n  getConflicts = (arrs) => {\n    return arrs.map((arr) => this.getConflictsInArray(arr));\n  };\n\n  getConflictsInArray = (arr) => {\n    const conflictMap = {};\n    for (let i = 0; i < arr.length; i++) {\n      let curr = arr[i];\n      if (curr.cellValue !== \"0\") {\n        if (conflictMap.hasOwnProperty(curr.cellValue)) {\n          conflictMap[curr.cellValue].push(curr.cellId);\n        } else {\n          conflictMap[curr.cellValue] = [curr.cellId];\n        }\n      }\n    }\n    return Object.values(conflictMap).filter((arr) => arr.length > 1);\n  };\n\n  formatPuzzle = (puzzle) => {\n    const formattedPuzzle = createArray(9, 9);\n    for (let i = 0; i < puzzle.length; i++) {\n      const rowId = this.getRowId(i);\n      const colId = this.getColId(i);\n\n      const editable = puzzle[i] === \"0\" ? true : false;\n\n      formattedPuzzle[rowId][colId] = {\n        cellValue: puzzle[i],\n        cellId: this.stringify(rowId, colId),\n        editable: editable,\n      };\n    }\n    return formattedPuzzle;\n  };\n  stringify = (num1, num2) => {\n    return num1 + \"\" + num2;\n  };\n\n  getRowId = (i) => {\n    return Math.floor(i / 9);\n  };\n\n  getColId = (i) => {\n    return i % 9;\n  };\n\n  getFormattedPuzzle = () => {\n    const puzzle = this.getRandomPuzzle();\n    const formattedPuzzle = this.formatPuzzle(puzzle);\n    return formattedPuzzle;\n  };\n\n  render() {\n    return (\n      <div className=\"Sudoku\">\n        <h1 className=\"sudokuHeader\" style={{ textAlign: \"center\" }}>\n          Alvin's Sudoku!\n        </h1>\n        <Board\n          boardState={this.state.boardState}\n          conflicts={this.state.conflicts}\n          onNewGameClick={this.handleNewGameClick}\n          onSquareValueChange={this.handleSquareValueChange}\n          historyLength={this.state.history.length}\n          onUndoClick={this.handleUndoClick}\n          onVerifyClick={this.handleVerifyClick}\n        />\n      </div>\n    );\n  }\n}\n\nfunction createArray(length) {\n  var arr = new Array(length || 0),\n    i = length;\n\n  if (arguments.length > 1) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    while (i--) arr[length - 1 - i] = createArray.apply(this, args);\n  }\n\n  return arr;\n}\n\nexport default SudokuGame;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Center from \"react-center\";\nimport \"./index.css\";\nimport SudokuGame from \"./components/SudokuGame\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Center>\n    <SudokuGame />\n  </Center>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}